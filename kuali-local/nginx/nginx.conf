events { }

http {

  # Extend timouts to 5 minutes
  proxy_read_timeout 300;
  proxy_connect_timeout 300;
  proxy_send_timeout 300;

  access_log /etc/nginx/access.log;
  error_log /etc/nginx/error.log warn;
  client_max_body_size 20m;
  include mime.types;

  # UPSTREAM NOTE: "_upstream" suffixed variables:
  # Allows nginx to startup without failure due to missing services (docker container is not running for that service)
  # Normally, the upstream portion is explicitly declared and nginx will try to resolve it during startup and fail.
  # However, if the upstream portion is a variable nginx will not attempt to resolve it during startup.
  # Useful if the docker-compose file has some services commented out
 

  server { 
    server_name localhost;
    listen 80;

    # See "UPSTREAM NOTE" above
    set $kc_upstream http://kuali-research:8080;
    set $core_upstream http://cor-main:3000;
    set $portal_upstream http://research-portal:3005;
    resolver 127.0.0.11;
    proxy_redirect off;

    # Handle health check requests directly 
    location /health-check {
      proxy_pass $kc_upstream/index.jsp;
    }

    # Redirect all remaining http requests to https  
    location / {  
      return 301 https://$server_name$request_uri;  
    }
  }

  server {
    server_name localhost;
    listen 443 ssl http2;
    ssl on;
    ssl_certificate /etc/nginx/ssl/self-signed.crt;
    ssl_certificate_key /etc/nginx/ssl/self-signed.key;

    # See "UPSTREAM NOTE" above
    set $kc_upstream http://kuali-research:8080;
    set $core_upstream http://cor-main:3000;
    set $portal_upstream http://research-portal:3005;
    resolver 127.0.0.11;
    proxy_redirect off;

    # Paths to kc
    location = / {
      return 301 https://$server_name/kc;
    }
    location /kc {
      proxy_set_header Host $host;
      proxy_pass $kc_upstream;
      rewrite ^/(.*)$ /$1 break;
    }    
    
    # Paths to dashboard
    location ~ ^/dashboard/?$ {
      # Redirect basic dashboard uri to 
      return 301 https://$server_name/dashboard/common-tasks;
    }
    location /dashboard {
      proxy_set_header Host $host;
      proxy_pass $portal_upstream;
    }
    location /api/v1/dashboard {
      proxy_set_header Host $host;
      proxy_pass $portal_upstream;
    }

    # Path to core
    location = /apps {
      proxy_set_header Host $host;
      proxy_pass $core_upstream/cor/main/?p=/apps;
    }
    location ~ ^/((img)|(js)|(css)|(font))$ {
      proxy_set_header Host $host;
      proxy_pass $core_upstream;
      rewrite ^/(.*)$ /cor/main/$1 break;
    }
    location / {
      # Anything left over goes to cor-main
      proxy_set_header Host $host;
      proxy_pass $core_upstream;
    }
  }

  # The path to core for service-to-service authentication api calls need to be made directly over the docker network bridge
  # to cor-main:3000, bypassing the reverse-proxy. Not sure why, but the connection will be refused if not done this way. 
  # However, some composited links that the dashboard app sends to the browser to logout or redirect for login include this 
  # path, which needs to be swapped for the one that routes through the reverse proxy. 
  # This is accomplished here by issuing a redirect.
  server {
    server_name cor-main;
    listen 3000;

    location ~ ^/(.*)$ {
      return 301 https://localhost/$1$is_args$args;
    }
  }
}